<?xml version="1.0" encoding="UTF-8" ?><ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3"><Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0"><bitmap>media/images/box/root.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Input name="Wikipedia/newArticle" type="0" type_size="1" nature="4" stm_value_name="Wikipedia/newArticle" inner="1" tooltip="Wikipedia/newArticle desc" id="4" /><Input name="Wikipedia/getArticle" type="0" type_size="1" nature="4" stm_value_name="Wikipedia/getArticle" inner="1" tooltip="Wikipedia/getArticle desc" id="5" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="6" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="subscribeToEvent" id="1" localization="8" tooltip="" x="585" y="146"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.tts=self.session().service("ALTextToSpeech")
        self.memory=self.session().service("ALMemory")
        # Deprecated since version 1.12
        # use subscriber instead + connect
        self.memory.subscribeToEvent("FrontTactilTouched",self.getName(),"touch_callback")

    def touch_callback(self,variable,value,msg):
        self.logger.info(variable+" "+str(value))
        if value>0: self.tts.say("ouch from my touch my callback function")

    def onUnload(self):
        # use disconnect
        self.memory.unsubscribeToEvent("FrontTactilTouched",self.getName())
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="subscriber" id="2" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="336" y="48"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[import urllib2
import json
import random

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.data = ""
        self.header_http = {'User-Agent': 'Mozilla/5.0',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
        'Accept-Charset': 'ISO-8859-1,utf-8;q=0.7,*;q=0.3',
        'Accept-Encoding': 'none',
        'Accept-Language': 'pl-PL,pl;q=0.8',
        'Connection': 'keep-alive'}

        # some titles  of wikipedia articles to randomize over
        self.titles=["Pepper", "Nao", "Romeo", "Aldebaran", "SoftbankRobotics"]

        # connect to ALMemory service
        self._memory = self.session().service("ALMemory")
        self.signal = None
        self.event_connection_id = -1

    def onUnload(self):
        self.unsubscribe()

    def onInput_onStart(self):

        # let's name an event
        event_name = "Wikipedia/getArticle"

        # declare the event
        self._memory.declareEvent(event_name)

        # subscribe to the event
        self.event_subscriber = self._memory.subscriber(event_name)

        # get the signal
        self.signal = self.event_subscriber.signal

        # connect signal to a callback and get its id
        self.event_connection_id = self.signal.connect(self.on_new_title_request)


    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()

    def onInput_onArticle(self):
        """ Box input onArticle """
        # raises an event
        self._memory.raiseMicroEvent("Wikipedia/getArticle", 1)

    def on_new_title_request(self, value):
        """ Callback function """
        # log for debug
        self.logger.info("Callback on_new_title_request called")

        # randomize over article titles
        self.randtitle = random.choice(self.titles)

        # request a new article
        self.getNewArticle()

    def getNewArticle(self):
        req = urllib2.Request("http://en.wikipedia.org/w/api.php?format=json&action=query&titles="+self.randtitle , headers=self.header_http)
        try:
            page = urllib2.urlopen(req)
        except urllib2.HTTPError, e:
            self.logger.info(e.fp.read());

        content = page.read()
        clean_json = json.loads(content)

        self.data = str(clean_json["query"])

        self._memory.raiseMicroEvent("Wikipedia/newArticle", self.data)

    def unsubscribe(self):
        if(self.signal is not None and self.event_connection_id != -1):
            self.signal.disconnect(self.event_connection_id)

        del self.signal
        self.signal = None
        self.event_connection_id = -1]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Input name="onArticle" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" /><Output name="output" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" /></Box><Box name="Log" id="3" localization="8" tooltip="Prompt the message in the debug window. You can set a prefix and a priority&#x0A;for the message in the parameters." x="119" y="160"><bitmap>media/images/box/print.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_message(self, p):
        sPriority = self.getParameter("Priority")
        sMessage = self.getParameter("Message prefix")
        if( sMessage != "" and p != None ):
            sMessage += ": "
        if( p != None ):
            sMessage += str(p)
        if( sPriority == "Fatal" ):
            self.logger.fatal( sMessage )
        elif( sPriority == "Error" ):
            self.logger.error( sMessage )
        elif( sPriority == "Warning" ):
            self.logger.warning( sMessage )
        elif( sPriority == "Info" ):
            self.logger.info( sMessage )
        elif( sPriority == "Debug" ):
            self.logger.debug( sMessage )
        self.onDone()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="message" type="0" type_size="1" nature="1" inner="0" tooltip='The message to print or a &quot;Bang&quot; to only print the message set as parameter.' id="2" /><Output name="onDone" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /><Parameter name="Message prefix" inherits_from_parent="0" content_type="3" value="Message text" default_value="Message text" custom_choice="0" tooltip="Enter the text you want to print before the input message." id="4" /><Parameter name="Priority" inherits_from_parent="0" content_type="3" value="Info" default_value="Info" custom_choice="0" tooltip="Enter the priority of your message. If you select error, the box will get red when it will be stimulated." id="5"><Choice value="Fatal" /><Choice value="Error" /><Choice value="Warning" /><Choice value="Info" /><Choice value="Debug" /></Parameter></Box><Link inputowner="0" indexofinput="6" outputowner="1" indexofoutput="4" /><Link inputowner="0" indexofinput="6" outputowner="2" indexofoutput="5" /><Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="4" /><Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="5" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box></ChoregrapheProject>